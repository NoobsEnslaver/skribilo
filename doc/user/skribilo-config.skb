;;; skribilo-config.skb  --  The `skribilo-config' tool
;;; -*- coding: iso-8859-1 -*-
;;;
;;; Copyright 2007, 2008, 2009  Ludovic Courtès <ludo@gnu.org>
;;; Copyright 2004  Manuel Serrano
;;;
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
;;; USA.

;*---------------------------------------------------------------------*/
;*    The `skribilo-config' tool                                           */
;*---------------------------------------------------------------------*/
(chapter :title "Getting Configuration Information"
         :ident "skribilo-config"

(index "skribilo-config")

(p [This chapter presents ,(code "skribilo-config"), a stand-alone
program that gives information about the current configuration.])

;; Synopsis
(section :title "Synopsis" :number #f
         :info-node "skribilo-config Synopsis"

(compiler-command "skribilo-config" "options"))

;; Description
(section :title "Description" :number #f
         :info-node "skribilo-config Description"
   
   (p [The ,(code "skribilo-config") program gives information about the
Skribilo configuration, such as the module installation path, version
number, etc.  The full list of supported options and their meaning is
the following:]
   
   (linebreak)

 (pre (let ((port (open-input-pipe (string-append %top-builddir
                                                  "/src/skribilo-config "
						  "--help 2>&1"))))
	 (let loop ((line (read-line port))
		    (lines '()))
	    (if (eof-object? line)
		(tt (string-concatenate-reverse lines))
		(begin
		   (loop (read-line port)
		         (cons* line "\n" lines))))))))
   
  (p [Note that the same information can be obtained through the
programming interface exposed by the ,(code [(skribilo config)]) module
(,(numref :text [see Section] :ident "config-module")).])))


;;; Local Variables:
;;; ispell-local-dictionary: "american"
;;; End:
