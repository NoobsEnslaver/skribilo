
# Compilation with Guile-VM's compiler (aka. Guile 2.x).

if ENABLE_GUILE_VM

# XXX: This expression relies on a GNU extension.
GOBJECTS = $(SOURCES:%.scm=%.go)

nobase_nodist_module_DATA =				\
  $(SOURCES) $(GOBJECTS) $(SOURCES_NOT_COMPILED)

# Compiler warnings.
guile_warnings = unused-variable unused-toplevel unbound-variable arity-mismatch

.scm.go:
	$(MKDIR_P) `dirname $@`
	GUILE_AUTO_COMPILE=0					\
	GUILE_LOAD_COMPILED_PATH="$(builddir):$(top_builddir)/src/guile:$$GUILE_LOAD_COMPILED_PATH" \
	$(GUILE) --debug -L "$(srcdir)" -L "$(top_srcdir)/src/guile"	\
	  -c "(use-modules (system base compile)		\
	                   (skribilo condition))		\
	      (call-with-skribilo-error-catch/exit		\
	        (lambda ()					\
	          (compile-file \"$<\" #:output-file \"$@\"	\
			        #:opts '(#:warnings ($(guile_warnings))))))"

CLEANFILES += $(GOBJECTS)

SUFFIXES += .go

else !ENABLE_GUILE_VM

nobase_nodist_module_DATA =			\
  $(SOURCES) $(SOURCES_NOT_COMPILED)

endif !ENABLE_GUILE_VM
